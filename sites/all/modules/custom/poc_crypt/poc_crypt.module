<?php

/*
 * Cryptage des données juste avant l'enregistrement des données en BDD
 */

function poc_crypt_user_presave(&$edit, $account, $category){
  $edit_object = (object) $edit;
  $user_wrapper = entity_metadata_wrapper('user', $edit_object);
  if(module_exists('crypto_config_fields')){
    if($user_fields_list = variable_get('user_field_list')){
      foreach($user_fields_list as $key_field => $value_field){
        if($value_field != '0'){
          $crypt_value = encrypt($user_wrapper->$key_field->value());
          $user_wrapper->$key_field->set($crypt_value);
        }
      }
    }
  }
  $edit = (array) $edit_object;
}

/*
 * Decryptage des données pour l'affichage d'un user
 */

function poc_crypt_user_load($users){
  foreach($users as $user_load){
    $user_wrapper = entity_metadata_wrapper('user', $user_load);
    if(module_exists('crypto_config_fields')){
      if($user_fields_list = variable_get('user_field_list')){
        foreach($user_fields_list as $key_field => $value_field){
          if($value_field != '0'){
            if (unserialize($user_wrapper->$key_field->value())){
              $user_field_value = decrypt($user_wrapper->$key_field->value());
              $user_wrapper->$key_field->set($user_field_value);
            }
          }
        }
      }
    }
  }
}

// function poc_crypt_views_api() {
//   return array(
//     'api' => 3,
//     'path' => drupal_get_path('module', 'poc_crypt') . '/includes/views',
//   );
// }
